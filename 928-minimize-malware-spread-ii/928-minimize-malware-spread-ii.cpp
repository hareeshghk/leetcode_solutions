class DSU {
    vector<int> parent, size;
public:
    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    bool unionfind(int a, int b) {
        int pa = find(a);
        int pb = find(b);
        
        if (pa == pb) return false;
        
        
        parent[pb] = pa;
        size[pa] += size[pb];
        return true;
    }
    
    int getsize(int a) {
        int pa = find(a);
        return size[pa];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU d(n);
        
        vector<int> isinfected(n, 0);
        for (auto c :initial) {
            isinfected[c] = 1;
        }
        
        // graph without malware nodes
        for (int i = 0; i < n; ++i) {
            if(isinfected[i] == 1) continue;
            for (int j = 0; j < n; ++j) {
                if(isinfected[j] == 1) continue;
                if (i!=j && graph[i][j] == 1) {
                    d.unionfind(i, j);
                }
            }
        }
        
        //counts components each malware can destroy easily
        unordered_map<int, unordered_set<int>> nodetocomponent;
        for (auto c : initial) {
            nodetocomponent[c] = unordered_set<int>();
        }
        
        // how manu malware connected to a component
        unordered_map<int,int> counter;
        for (auto c : initial) {
            for (int v = 0; v < n;++v) {
                if (isinfected[v] == 1) continue;
                if (graph[c][v] ==1) {
                    nodetocomponent[c].insert(d.find(v));
                }
            }
            
            for (auto nei : nodetocomponent[c]) {
                counter[nei]++;
            }
        }
        
        // for (int i = 0; i < n; i++) {
        //     cout << counter[i] <<  " ";
        // }
        // cout << endl;
        int result = -1, maxnodesinnfected=-1;
        // find count of nodes each malware can infect
        for (auto val : nodetocomponent) {
            int malwarenode = val.first;
            int numnodesinfected = 0;
            for (auto comp : val.second) {
                if (counter[comp] == 1) numnodesinfected += d.getsize(comp);
            }
            if (numnodesinfected > maxnodesinnfected) {
                maxnodesinnfected = numnodesinfected;
                result = malwarenode;
            } else if ((numnodesinfected == maxnodesinnfected) && (malwarenode < result)) {
                result = malwarenode;
            }
        }
        return result;
    }
};