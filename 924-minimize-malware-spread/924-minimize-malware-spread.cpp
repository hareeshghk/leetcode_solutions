class DSU {
    vector<int> parent, size;
public:
    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    bool unionfind(int a, int b) {
        int pa = find(a);
        int pb = find(b);
        
        if (pa == pb) return false;
        
        
        parent[pb] = pa;
        size[pa] += size[pb];
        return true;
    }
    
    int getsize(int a) {
        int pa = find(a);
        return size[pa];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU d(n);
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i!=j && graph[i][j] == 1) {
                    d.unionfind(i, j);
                }
            }
        }
        
        vector<int> malwarecount(n, 0);
        for (auto c: initial) {
            malwarecount[d.find(c)]++;
        }
        
        int anssize=-1,ansnode=-1;
        for (auto c :initial) {
            if (malwarecount[d.find(c)] == 1) {
                if (d.getsize(c) > anssize) {
                    anssize =d.getsize(c);
                    ansnode = c;
                } else if (d.getsize(c) == anssize && c < ansnode) {
                    ansnode = c;
                }
            }
        }
        
        if (ansnode==-1) {
            ansnode = n;
            for (auto c :initial) {
                ansnode = min(ansnode, c);
            }
        }
        return ansnode;
    }
};